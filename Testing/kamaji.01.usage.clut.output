CLUT Output Begins...
CLUT Output Format Version: 5.5
CLUT Source File: kamaji.01.usage.clut (25 cases)

0. Global Information
0.1. Notations
    |No notations defined.
0.2. Requirement Statements
    |No requirements defined.
0.3. Requirement Coverage
    |No requirements defined.
0.4. Comparable Masks
    |No masks defined.

1. NoArguments.
    |General usage should be displayed.
1.1. Requirements.
    |None.
1.2. Initializations.
1.2.1. mkdir Testing
1.3. Initial Workspace contains one file...
    |Testing
1.3.1. Testing is empty.
1.4. Target CLU Call.
1.4.1.  kamaji
1.4.1.1. Exit Status 1!
1.4.1.2. STDERR [text]...
    |ERROR: Unable to fulfill a '' request.
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Synonyms compare (delta), configure (set), noisy (verbose), pre-grade (delta),
    |quiet (silent), and usage (help) are supported. Modifier and request
    |abbreviations are also supported; ambiguity is resolved using alphabetical
    |order. No other modifiers or requests are applied after a help request is
    |fulfilled.
    |
    |Specific usage may be displayed by following a help request by the subject of
    |interest; for example, "kamaji help fast" or "kamaji help grade"
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile it (if not already executable), invoke it to produce output, mask that
    |output, compare the masked output to its baseline, and then grade it based on
    |that comparison.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |written in compilable code or a scripting language. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled functional changes to
    |the code being tested.
    |
    |Passing grades are only granted when current output matches baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-defined sed script.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
1.5. Finalizations.
1.6. Workspace Impact...
    |Only in 01.Omega: .kamaji.sed
    |Only in 01.Omega: Working
1.6.1. .kamaji.sed (created) is empty.
1.6.2. Working (created) contains one file.
1.6.2.1. .kamaji.sed is a symbolic link to ../.kamaji.sed

2. Usage.
    |General usage should be displayed.
2.1. Requirements.
    |None.
2.2. Initializations.
2.3. Initial Workspace is empty.
2.4. Target CLU Call.
2.4.1.  kamaji usage
2.4.1.1. Exit Status 1!
2.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Synonyms compare (delta), configure (set), noisy (verbose), pre-grade (delta),
    |quiet (silent), and usage (help) are supported. Modifier and request
    |abbreviations are also supported; ambiguity is resolved using alphabetical
    |order. No other modifiers or requests are applied after a help request is
    |fulfilled.
    |
    |Specific usage may be displayed by following a help request by the subject of
    |interest; for example, "kamaji help fast" or "kamaji help grade"
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile it (if not already executable), invoke it to produce output, mask that
    |output, compare the masked output to its baseline, and then grade it based on
    |that comparison.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |written in compilable code or a scripting language. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled functional changes to
    |the code being tested.
    |
    |Passing grades are only granted when current output matches baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-defined sed script.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
2.5. Finalizations.
2.6. Workspace Impact...
2.6.1. The initial and final workspace contents are equivalent.

3. Help.
    |General usage should be displayed.
3.1. Requirements.
    |None.
3.2. Initializations.
3.3. Initial Workspace is empty.
3.4. Target CLU Call.
3.4.1.  kamaji help
3.4.1.1. Exit Status 1!
3.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Synonyms compare (delta), configure (set), noisy (verbose), pre-grade (delta),
    |quiet (silent), and usage (help) are supported. Modifier and request
    |abbreviations are also supported; ambiguity is resolved using alphabetical
    |order. No other modifiers or requests are applied after a help request is
    |fulfilled.
    |
    |Specific usage may be displayed by following a help request by the subject of
    |interest; for example, "kamaji help fast" or "kamaji help grade"
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile it (if not already executable), invoke it to produce output, mask that
    |output, compare the masked output to its baseline, and then grade it based on
    |that comparison.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |written in compilable code or a scripting language. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled functional changes to
    |the code being tested.
    |
    |Passing grades are only granted when current output matches baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-defined sed script.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
3.5. Finalizations.
3.6. Workspace Impact...
3.6.1. The initial and final workspace contents are equivalent.

4. Bobo.
    |General usage should be displayed. The working directory will also be created because a command was issued.
4.1. Requirements.
    |None.
4.2. Initializations.
4.2.1. mkdir Testing
4.3. Initial Workspace contains one file...
    |Testing
4.3.1. Testing is empty.
4.4. Target CLU Call.
4.4.1.  kamaji fast bobo
4.4.1.1. Exit Status 1!
4.4.1.2. STDERR [text]...
    |ERROR: Unable to fulfill a 'bobo' request.
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Synonyms compare (delta), configure (set), noisy (verbose), pre-grade (delta),
    |quiet (silent), and usage (help) are supported. Modifier and request
    |abbreviations are also supported; ambiguity is resolved using alphabetical
    |order. No other modifiers or requests are applied after a help request is
    |fulfilled.
    |
    |Specific usage may be displayed by following a help request by the subject of
    |interest; for example, "kamaji help fast" or "kamaji help grade"
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile it (if not already executable), invoke it to produce output, mask that
    |output, compare the masked output to its baseline, and then grade it based on
    |that comparison.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |written in compilable code or a scripting language. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled functional changes to
    |the code being tested.
    |
    |Passing grades are only granted when current output matches baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-defined sed script.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
4.5. Finalizations.
4.6. Workspace Impact...
    |Only in 04.Omega: .kamaji.sed
    |Only in 04.Omega: Working
4.6.1. .kamaji.sed (created) is empty.
4.6.2. Working (created) contains 2 files.
4.6.2.1. .kamaji.ruleset.bash...
    |#
    |#  Working/.kamaji.ruleset.bash
    |#
    |#  __KamajiBaseSourceList[TargetFName]="SourceFName": What recipe should I follow given FName as a target?
    |#  __KamajiClassifiedList[TargetPhony]="SourceFName...": What files are direct sources of this target?
    |#  __KamajiMyChildrenList[SourceFName]="TargetFName...": What files are created directly from this source?
    |#  __KamajiMyParentalList[TargetFName]="SourceFName...": What files are direct sources of this target?
    |#  __KamajiRepresentative[TargetFName]="SourceFSpec": What external file does this file name represent?
    |#  __KamajiXtraParentList[TargetFName]="SourceFName...": What files are user-defined sources of target?
    |#
    |#  Where FName == file name within the working-folder
    |#        FName == file specification outside of the working-folder
    |#
    |__KamajiBaseSourceList[.kamaji.sed]="  .kamaji.sed"
    |#
    |__KamajiClassifiedList[Grade]=""
    |__KamajiClassifiedList[Output]=""
    |__KamajiClassifiedList[Review]=""
    |__KamajiClassifiedList[SedMaskingScript]=" .kamaji.sed"
    |#
    |__KamajiMyParentalList[.kamaji.sed]=""
    |#
    |__KamajiRepresentative[.kamaji.sed]="../.kamaji.sed"
    |#
    |#  (eof)
4.6.2.2. .kamaji.sed is a symbolic link to ../.kamaji.sed

5. Help_configure.
5.1. Requirements.
    |None.
5.2. Initializations.
5.3. Initial Workspace is empty.
5.4. Target CLU Call.
5.4.1.  kamaji help configure
5.4.1.1. Exit Status 1!
5.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Configure|Set...
    |
    |Named configuration variables and their values are stored in the
    |$HOME/.kamaji.conf and ./.kamaji.conf files; settings in the latter will
    |re-define or augment variables in the former. Both files can contain comments,
    |blank lines, and variable settings. Variables cannot be set to an empty value.
    |
    |The following settings represent the non-empty defaults:
    |
    |    baseline-folder         Testing
    |    last-target-filename    .kamaji.last_target.text
    |    long-review-command     vimdiff -R
    |    long-review-line-count  51
    |    mask-sed-script         .kamaji.sed
    |    new-review-command      cat --number
    |    script-type-list        bash sh py rb
    |    short-review-command    diff
    |    time-output-format      NONE
    |    verbosity-level         quiet
    |    working-folder          Working
    |
    |The following variables are defined:
    |
    |    baseline-folder <directory-specification> - Specification for the directory
    |    where baseline output files are stored.
    |    
    |    data-extension-list <extension>... - A list of name extensions for "data"
    |    files that are stored in the baseline-folder, but do not represent CLUT or
    |    unit test exercises or their output. Data files are represented in the
    |    working-folder.
    |    
    |    data-filename-list <filename>... - A list of names for "data" files that
    |    are stored in the baseline-folder, but do not represent CLUT or unit test
    |    exercises or their output. Data files are represented in the
    |    working-folder.
    |    
    |    last-target-filename <filename> - The name of the file in which the
    |    filename of the last make target is stored; the file is stored in the
    |    working-folder.
    |    
    |    long-review-command <command> - The command used to perform a long review.
    |    A long review is defined by the configured long-review-line-count value.
    |    The command is called from within the working-folder, and is passed the
    |    masked baseline output and masked current output files in that order.
    |    
    |    long-review-line-count <integer> - The number of diff command output lines
    |    that are too many to be considered the subject of a short review. This
    |    number is used to define the difference between a short and long review.
    |    
    |    long-review-tailpipe <command> [ | <command> ]... - A command into which
    |    the long-review-command output is piped. For example, if you set the
    |    long-review-command to "diff" then you might want to set the
    |    review-tailpipe to "sed --expression='s,^, ,' | less" so that the diff
    |    output will be indented, you can view it a page at a time, and it will not
    |    clutter your display after your review.
    |    
    |    makefile-filename <filename> - The name of the file into which a makefile
    |    is exported.
    |    
    |    mask-sed-script <file-specification> - Specification for the user-defined
    |    sed script that is used to mask output files.
    |    
    |    new-review-command <command> - The command used to perform a new review. A
    |    new review is one for which there is no baseline output file to compare to.
    |    The command is called from within the working-folder, and is passed the
    |    masked current output file.
    |    
    |    new-review-tailpipe <command> [ | <command> ]... - A command into which the
    |    new-review-command output is piped.
    |    
    |    ruleset-filename <filename> - The name of the file in which the ruleset is
    |    stored. The ruleset is stored and used by the 'export ruleset' request and
    |    'fast' modifier. the file is stored in the working-folder.
    |    
    |    script-type-list [<extension>]... - A list of file name extensions that are
    |    used to store executable scripts.
    |    
    |    short-review-command <command> - The command used to perform a short
    |    review. A short review is defined by the configured long-review-line-count
    |    value. The command is called from within the working-folder, and is passed
    |    the masked baseline output and masked current output files in that order.
    |    
    |    short-review-tailpipe <command> [ | <command> ]... - A command into which
    |    the short-review-command output is piped.
    |    
    |    time-output-format { <time-format> | FULL | NONE } - The output format used
    |    by the /usr/bin/time program to provide run-time statistics about CLUT
    |    scripts and unit test scripts and programs; please see the GNU VERSION
    |    section of the description produced by the man time command. A pre-defined,
    |    verbose format can be applied by using the FULL value. The time program is
    |    not used if this variable is set to NONE or if the /usr/bin/time program is
    |    not available.
    |    
    |    verbosity-level <adjective> - The level of diagnostic output produced. The
    |    'quiet' level suppresses diagnostic output. The 'light' level will describe
    |    the 'make' requests used to fulfill the user's request. The 'heavy' level
    |    will augment light output with a description of commands applied to files
    |    in the working-folder and comments that describe data that it uses to
    |    decide what commands should be applied.
    |    
    |    working-folder <directory-specification> - The specification for the
    |    directory where intermediate and unverified output files are created. If
    |    the working-folder does not already exist then it will be silently created.
    |    
    |Subsequent variable settings override previous values for the variable they
    |name, unless that variable represents a list, in which case the value is
    |augmented.
    |
    |A list of the configuration variable names can be displayed using a 'show
    |configuration variables' request.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
5.5. Finalizations.
5.6. Workspace Impact...
5.6.1. The initial and final workspace contents are equivalent.

6. Help_export.
6.1. Requirements.
    |None.
6.2. Initializations.
6.3. Initial Workspace is empty.
6.4. Target CLU Call.
6.4.1.  kamaji help export
6.4.1.1. Exit Status 1!
6.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Export...
    |
    |The kamaji script allows the user to export data in two forms: makefile and
    |ruleset.
    |
    |Export Makefile...
    |
    |The 'export makefile' request is used to produce a makefile that can be used to
    |integrate kamaji into a makefile system. An exported makefile contains a rule
    |for every derived file known to kamaji. Use of the make command --jobs switch
    |with the exported makefile can produce results even faster than invoking
    |parallel kamaji grade requests.
    |
    |Export Ruleset...
    |
    |The kamaji script defines a ruleset that it uses to guide creation of every
    |file in the working-folder; to determine what files need to be made or re-made,
    |and the proper order in which that should happen.
    |
    |By default, kamaji generates its ruleset every time it is called so that it can
    |properly react to dramatic changes in the baseline-folder. As the ruleset only
    |changes when files are added or removed from the baseline-folder, it is
    |inefficient to regenerate the ruleset when the baseline-folder has not changed
    |in this way.
    |
    |Users can request that kamaji export its current ruleset for future use using
    |the 'export' request. The ruleset-filename configuration variable can be used
    |to name the file in which the ruleset is stored.
    |
    |The 'fast' modifier can be used to ask kamaji to load an exported ruleset
    |instead of generating one itself. The 'fast' modifier will generate and export
    |a ruleset when it does not find one to load.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
6.5. Finalizations.
6.6. Workspace Impact...
6.6.1. The initial and final workspace contents are equivalent.

7. Help_grade.
7.1. Requirements.
    |None.
7.2. Initializations.
7.3. Initial Workspace is empty.
7.4. Target CLU Call.
7.4.1.  kamaji help grade
7.4.1.1. Exit Status 1!
7.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Grade...
    |
    |A 'grade' request will determine the pass or fail status of a one or more CLUT
    |or unit test exercise.
    |
    |A passing grade is granted for a test program when the program produces output
    |that matches its expected/golden baseline output. Comparisons are made to
    |output files only after they are masked to remove non-deterministic values
    |(e.g. dates, times, account names).
    |
    |Masking is performed by a user-defined sed script; the mask-sed-script
    |configuration value can be used to specify the location of that script.
    |
    |A 'grade last' request with grade the output associated with the last make
    |target processed by kamaji the last time it was invoked. The "last" target is
    |the same no matter where it appears in the list of targets passed to a 'grade'
    |request.
    |
    |A 'grade' request without any specific targets is the same as a 'grade' request
    |for all known targets. Furthermore, those targets will be evaluated based when
    |their base sources were last modified. In this way, when the user modifies the
    |source file for a specific CLUT or unit test, kamaji will give evaluation of
    |that test a higher priority than for all others.
    |
    |Although grades are identified using the "grade" file name extension, the
    |actual grade is not stored. This practice will cause kamaji to evaluate a CLUT
    |or unit test exercise, and display the assigned grade, every time the user
    |requests it. As such, the user will get explicit grade feedback for every test
    |every time it is requested.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
7.5. Finalizations.
7.6. Workspace Impact...
7.6.1. The initial and final workspace contents are equivalent.

8. Help_make.
8.1. Requirements.
    |None.
8.2. Initializations.
8.3. Initial Workspace is empty.
8.4. Target CLU Call.
8.4.1.  kamaji help make
8.4.1.1. Exit Status 1!
8.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Make...
    |
    |Users can request that kamaji generate one or more specific files by naming
    |them in a 'make' request. When the user asks kamaji to make a file that is
    |already the most up-to-date version of itself, then kamaji ignores the request;
    |it is not an error. Files are only remade after the files that they are created
    |from are remade, if necessary. Files are only remade when files that they are
    |created from have changed; either because the user changed them or because they
    |themselves were remade.
    |
    |A 'make grades' request is the same as a 'grade' request: Every output file is
    |generated, compared to its associated baseline, and then graded based on that
    |comparison.
    |
    |A 'make outputs' request is the same as an 'invoke' request: Every output file
    |is generated.
    |
    |A 'make last' request will attempt to remake the last specific target of a
    |'grade' or 'invoke' or 'make' request. This is an especially useful shorthand
    |when kamaji is used for test-driven development.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
8.5. Finalizations.
8.6. Workspace Impact...
8.6.1. The initial and final workspace contents are equivalent.

9. Help_set.
9.1. Requirements.
    |None.
9.2. Initializations.
9.3. Initial Workspace is empty.
9.4. Target CLU Call.
9.4.1.  kamaji help set
9.4.1.1. Exit Status 1!
9.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Configure|Set...
    |
    |Named configuration variables and their values are stored in the
    |$HOME/.kamaji.conf and ./.kamaji.conf files; settings in the latter will
    |re-define or augment variables in the former. Both files can contain comments,
    |blank lines, and variable settings. Variables cannot be set to an empty value.
    |
    |The following settings represent the non-empty defaults:
    |
    |    baseline-folder         Testing
    |    last-target-filename    .kamaji.last_target.text
    |    long-review-command     vimdiff -R
    |    long-review-line-count  51
    |    mask-sed-script         .kamaji.sed
    |    new-review-command      cat --number
    |    script-type-list        bash sh py rb
    |    short-review-command    diff
    |    time-output-format      NONE
    |    verbosity-level         quiet
    |    working-folder          Working
    |
    |The following variables are defined:
    |
    |    baseline-folder <directory-specification> - Specification for the directory
    |    where baseline output files are stored.
    |    
    |    data-extension-list <extension>... - A list of name extensions for "data"
    |    files that are stored in the baseline-folder, but do not represent CLUT or
    |    unit test exercises or their output. Data files are represented in the
    |    working-folder.
    |    
    |    data-filename-list <filename>... - A list of names for "data" files that
    |    are stored in the baseline-folder, but do not represent CLUT or unit test
    |    exercises or their output. Data files are represented in the
    |    working-folder.
    |    
    |    last-target-filename <filename> - The name of the file in which the
    |    filename of the last make target is stored; the file is stored in the
    |    working-folder.
    |    
    |    long-review-command <command> - The command used to perform a long review.
    |    A long review is defined by the configured long-review-line-count value.
    |    The command is called from within the working-folder, and is passed the
    |    masked baseline output and masked current output files in that order.
    |    
    |    long-review-line-count <integer> - The number of diff command output lines
    |    that are too many to be considered the subject of a short review. This
    |    number is used to define the difference between a short and long review.
    |    
    |    long-review-tailpipe <command> [ | <command> ]... - A command into which
    |    the long-review-command output is piped. For example, if you set the
    |    long-review-command to "diff" then you might want to set the
    |    review-tailpipe to "sed --expression='s,^, ,' | less" so that the diff
    |    output will be indented, you can view it a page at a time, and it will not
    |    clutter your display after your review.
    |    
    |    makefile-filename <filename> - The name of the file into which a makefile
    |    is exported.
    |    
    |    mask-sed-script <file-specification> - Specification for the user-defined
    |    sed script that is used to mask output files.
    |    
    |    new-review-command <command> - The command used to perform a new review. A
    |    new review is one for which there is no baseline output file to compare to.
    |    The command is called from within the working-folder, and is passed the
    |    masked current output file.
    |    
    |    new-review-tailpipe <command> [ | <command> ]... - A command into which the
    |    new-review-command output is piped.
    |    
    |    ruleset-filename <filename> - The name of the file in which the ruleset is
    |    stored. The ruleset is stored and used by the 'export ruleset' request and
    |    'fast' modifier. the file is stored in the working-folder.
    |    
    |    script-type-list [<extension>]... - A list of file name extensions that are
    |    used to store executable scripts.
    |    
    |    short-review-command <command> - The command used to perform a short
    |    review. A short review is defined by the configured long-review-line-count
    |    value. The command is called from within the working-folder, and is passed
    |    the masked baseline output and masked current output files in that order.
    |    
    |    short-review-tailpipe <command> [ | <command> ]... - A command into which
    |    the short-review-command output is piped.
    |    
    |    time-output-format { <time-format> | FULL | NONE } - The output format used
    |    by the /usr/bin/time program to provide run-time statistics about CLUT
    |    scripts and unit test scripts and programs; please see the GNU VERSION
    |    section of the description produced by the man time command. A pre-defined,
    |    verbose format can be applied by using the FULL value. The time program is
    |    not used if this variable is set to NONE or if the /usr/bin/time program is
    |    not available.
    |    
    |    verbosity-level <adjective> - The level of diagnostic output produced. The
    |    'quiet' level suppresses diagnostic output. The 'light' level will describe
    |    the 'make' requests used to fulfill the user's request. The 'heavy' level
    |    will augment light output with a description of commands applied to files
    |    in the working-folder and comments that describe data that it uses to
    |    decide what commands should be applied.
    |    
    |    working-folder <directory-specification> - The specification for the
    |    directory where intermediate and unverified output files are created. If
    |    the working-folder does not already exist then it will be silently created.
    |    
    |Subsequent variable settings override previous values for the variable they
    |name, unless that variable represents a list, in which case the value is
    |augmented.
    |
    |A list of the configuration variable names can be displayed using a 'show
    |configuration variables' request.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
9.5. Finalizations.
9.6. Workspace Impact...
9.6.1. The initial and final workspace contents are equivalent.

10. Help_show.
10.1. Requirements.
    |None.
10.2. Initializations.
10.3. Initial Workspace is empty.
10.4. Target CLU Call.
10.4.1.  kamaji help show
10.4.1.1. Exit Status 1!
10.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Show...
    |
    |The 'show' request can be used to display the configuration, the copyright, or
    |the software version.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
10.5. Finalizations.
10.6. Workspace Impact...
10.6.1. The initial and final workspace contents are equivalent.

11. Help_fast.
11.1. Requirements.
    |None.
11.2. Initializations.
11.3. Initial Workspace is empty.
11.4. Target CLU Call.
11.4.1.  kamaji usage fast
11.4.1.1. Exit Status 1!
11.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Fast...
    |
    |When the number of files in the baseline-folder does not change, the 'fast'
    |modifier can be used to improve the efficiency of kamaji. When the 'fast'
    |modifier is used, kamaji loads a stored ruleset instead of generating a new
    |one. An 'export ruleset' request can be used to store the current ruleset.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
11.5. Finalizations.
11.6. Workspace Impact...
11.6.1. The initial and final workspace contents are equivalent.

12. Help_help.
12.1. Requirements.
    |None.
12.2. Initializations.
12.3. Initial Workspace is empty.
12.4. Target CLU Call.
12.4.1.  kamaji usage help
12.4.1.1. Exit Status 1!
12.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Usage|Help...
    |
    |You can get addition help by specifying the modifier or request you are
    |interested in after the 'usage' or 'help' keyword. For example, "kamaji help
    |silent" and "kamaji usage export"
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
12.5. Finalizations.
12.6. Workspace Impact...
12.6.1. The initial and final workspace contents are equivalent.

13. Help_meticulous.
13.1. Requirements.
    |None.
13.2. Initializations.
13.3. Initial Workspace is empty.
13.4. Target CLU Call.
13.4.1.  kamaji usage meticulous
13.4.1.1. Exit Status 1!
13.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Synonyms compare (delta), configure (set), noisy (verbose), pre-grade (delta),
    |quiet (silent), and usage (help) are supported. Modifier and request
    |abbreviations are also supported; ambiguity is resolved using alphabetical
    |order. No other modifiers or requests are applied after a help request is
    |fulfilled.
    |
    |Specific usage may be displayed by following a help request by the subject of
    |interest; for example, "kamaji help fast" or "kamaji help grade"
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile it (if not already executable), invoke it to produce output, mask that
    |output, compare the masked output to its baseline, and then grade it based on
    |that comparison.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |written in compilable code or a scripting language. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled functional changes to
    |the code being tested.
    |
    |Passing grades are only granted when current output matches baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-defined sed script.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
13.5. Finalizations.
13.6. Workspace Impact...
13.6.1. The initial and final workspace contents are equivalent.

14. Help_noisy.
14.1. Requirements.
    |None.
14.2. Initializations.
14.3. Initial Workspace is empty.
14.4. Target CLU Call.
14.4.1.  kamaji usage noisy
14.4.1.1. Exit Status 1!
14.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Verbose|Noisy and Silent|Quiet...
    |
    |Three levels of diagnostic output are controlled by the verbose and silent
    |modifiers: A single verbose modifier is a request for light diagnostic output.
    |Multiple verbose modifiers will produce heavy diagnostic output. The silent
    |modifier turns off all diagnostic output.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
14.5. Finalizations.
14.6. Workspace Impact...
14.6.1. The initial and final workspace contents are equivalent.

15. Help_quiet.
15.1. Requirements.
    |None.
15.2. Initializations.
15.3. Initial Workspace is empty.
15.4. Target CLU Call.
15.4.1.  kamaji usage quiet
15.4.1.1. Exit Status 1!
15.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Verbose|Noisy and Silent|Quiet...
    |
    |Three levels of diagnostic output are controlled by the verbose and silent
    |modifiers: A single verbose modifier is a request for light diagnostic output.
    |Multiple verbose modifiers will produce heavy diagnostic output. The silent
    |modifier turns off all diagnostic output.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
15.5. Finalizations.
15.6. Workspace Impact...
15.6.1. The initial and final workspace contents are equivalent.

16. Help_silent.
16.1. Requirements.
    |None.
16.2. Initializations.
16.3. Initial Workspace is empty.
16.4. Target CLU Call.
16.4.1.  kamaji usage silent
16.4.1.1. Exit Status 1!
16.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Verbose|Noisy and Silent|Quiet...
    |
    |Three levels of diagnostic output are controlled by the verbose and silent
    |modifiers: A single verbose modifier is a request for light diagnostic output.
    |Multiple verbose modifiers will produce heavy diagnostic output. The silent
    |modifier turns off all diagnostic output.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
16.5. Finalizations.
16.6. Workspace Impact...
16.6.1. The initial and final workspace contents are equivalent.

17. Help_usage.
17.1. Requirements.
    |None.
17.2. Initializations.
17.3. Initial Workspace is empty.
17.4. Target CLU Call.
17.4.1.  kamaji usage usage
17.4.1.1. Exit Status 1!
17.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Usage|Help...
    |
    |You can get addition help by specifying the modifier or request you are
    |interested in after the 'usage' or 'help' keyword. For example, "kamaji help
    |silent" and "kamaji usage export"
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
17.5. Finalizations.
17.6. Workspace Impact...
17.6.1. The initial and final workspace contents are equivalent.

18. Help_verbose.
18.1. Requirements.
    |None.
18.2. Initializations.
18.3. Initial Workspace is empty.
18.4. Target CLU Call.
18.4.1.  kamaji usage verbose
18.4.1.1. Exit Status 1!
18.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Verbose|Noisy and Silent|Quiet...
    |
    |Three levels of diagnostic output are controlled by the verbose and silent
    |modifiers: A single verbose modifier is a request for light diagnostic output.
    |Multiple verbose modifiers will produce heavy diagnostic output. The silent
    |modifier turns off all diagnostic output.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
18.5. Finalizations.
18.6. Workspace Impact...
18.6.1. The initial and final workspace contents are equivalent.

19. Help_execute.
19.1. Requirements.
    |None.
19.2. Initializations.
19.3. Initial Workspace is empty.
19.4. Target CLU Call.
19.4.1.  kamaji help execute
19.4.1.1. Exit Status 1!
19.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Execute|Invoke|Run...
    |
    |An 'invoke' request causes each CLUT or unit test exercise to be executed.
    |Output from each CLUT or unit test exercise is captured in an output file.
    |
    |An 'invoke last' request will invoke the last make target processed by kamaji
    |the last time it was itself invoked. The "last" target is the same no matter
    |where it appears in the list of targets passed to an 'invoke' request.
    |
    |An 'invoke' request without any specific targets is the same as an 'invoke'
    |request for all known targets. Furthermore, those targets will be invoked based
    |when their base sources were last modified. In this way, when the user modifies
    |the source file for a specific CLUT or unit test, then kamaji will give output
    |generation for that test a higher priority than for all others.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
19.5. Finalizations.
19.6. Workspace Impact...
19.6.1. The initial and final workspace contents are equivalent.

20. Help_invoke.
20.1. Requirements.
    |None.
20.2. Initializations.
20.3. Initial Workspace is empty.
20.4. Target CLU Call.
20.4.1.  kamaji help invoke
20.4.1.1. Exit Status 1!
20.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Execute|Invoke|Run...
    |
    |An 'invoke' request causes each CLUT or unit test exercise to be executed.
    |Output from each CLUT or unit test exercise is captured in an output file.
    |
    |An 'invoke last' request will invoke the last make target processed by kamaji
    |the last time it was itself invoked. The "last" target is the same no matter
    |where it appears in the list of targets passed to an 'invoke' request.
    |
    |An 'invoke' request without any specific targets is the same as an 'invoke'
    |request for all known targets. Furthermore, those targets will be invoked based
    |when their base sources were last modified. In this way, when the user modifies
    |the source file for a specific CLUT or unit test, then kamaji will give output
    |generation for that test a higher priority than for all others.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
20.5. Finalizations.
20.6. Workspace Impact...
20.6.1. The initial and final workspace contents are equivalent.

21. Help_run.
21.1. Requirements.
    |None.
21.2. Initializations.
21.3. Initial Workspace is empty.
21.4. Target CLU Call.
21.4.1.  kamaji help run
21.4.1.1. Exit Status 1!
21.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Execute|Invoke|Run...
    |
    |An 'invoke' request causes each CLUT or unit test exercise to be executed.
    |Output from each CLUT or unit test exercise is captured in an output file.
    |
    |An 'invoke last' request will invoke the last make target processed by kamaji
    |the last time it was itself invoked. The "last" target is the same no matter
    |where it appears in the list of targets passed to an 'invoke' request.
    |
    |An 'invoke' request without any specific targets is the same as an 'invoke'
    |request for all known targets. Furthermore, those targets will be invoked based
    |when their base sources were last modified. In this way, when the user modifies
    |the source file for a specific CLUT or unit test, then kamaji will give output
    |generation for that test a higher priority than for all others.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
21.5. Finalizations.
21.6. Workspace Impact...
21.6.1. The initial and final workspace contents are equivalent.

22. Help_review.
22.1. Requirements.
    |None.
22.2. Initializations.
22.3. Initial Workspace is empty.
22.4. Target CLU Call.
22.4.1.  kamaji help review
22.4.1.1. Exit Status 1!
22.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Review...
    |
    |A 'review' request can be used to inspect the masked output differences that
    |led to a failed grade. Reviews are based on grades, and they are only performed
    |for failing grades. After the user reviews a failing grade, then kamaji will
    |allow the user to baseline the new output using a 'bless' request.
    |
    |There are three different kinds of review: new, short, and long. New reviews
    |are performed on output for which there is no baseline to compare to. Short
    |reviews are performed when the changes between the baseline and current output
    |are so few that specialized tools are not necessary to perform a detailed
    |review. Long reviews are performed for all other results.
    |
    |The vimdiff command is a useful tool for performing long reviews. Users not
    |familiar with the editor may want to make note of the following vim commands:
    |the :help command to request help; the :qa command to exit the editor; the h,
    |j, k, l, and arrow keys to move around in a pane; and the [ctrl]-h, [ctrl]-l,
    |and [ctrl]-w combinations to switch panes.
    |
    |The long-review-line-count configuration variables allow the user to define the
    |boundary between a short and long review. The new-, short-, and
    |long-review-command configuration variables can be used to change the command
    |used to perform a review. The new-, short-, and long-review-tailpipe
    |configuration variables allow the user to manipulate the output produced by the
    |new-, short-, and long-review-command variables, respectively.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
22.5. Finalizations.
22.6. Workspace Impact...
22.6.1. The initial and final workspace contents are equivalent.

23. Help_bless.
23.1. Requirements.
    |None.
23.2. Initializations.
23.3. Initial Workspace is empty.
23.4. Target CLU Call.
23.4.1.  kamaji help bless
23.4.1.1. Exit Status 1!
23.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Baseline|Bless...
    |
    |The 'bless' request allows you to baseline current output files after you have
    |reviewed them. A 'bless' request will not generate any test data; it can only
    |be applied to output files that have already been generated and reviewed. it is
    |a convenient shorthand, but it will cost you if you baseline output that is not
    |valid.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
23.5. Finalizations.
23.6. Workspace Impact...
23.6.1. The initial and final workspace contents are equivalent.

24. Help_baseline.
24.1. Requirements.
    |None.
24.2. Initializations.
24.3. Initial Workspace is empty.
24.4. Target CLU Call.
24.4.1.  kamaji help baseline
24.4.1.1. Exit Status 1!
24.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Baseline|Bless...
    |
    |The 'bless' request allows you to baseline current output files after you have
    |reviewed them. A 'bless' request will not generate any test data; it can only
    |be applied to output files that have already been generated and reviewed. it is
    |a convenient shorthand, but it will cost you if you baseline output that is not
    |valid.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
24.5. Finalizations.
24.6. Workspace Impact...
24.6.1. The initial and final workspace contents are equivalent.

25. Help_delta.
25.1. Requirements.
    |None.
25.2. Initializations.
25.3. Initial Workspace is empty.
25.4. Target CLU Call.
25.4.1.  kamaji help delta
25.4.1.1. Exit Status 1!
25.4.1.2. STDERR [text]...
    |USAGE: kamaji [<modifier>]... [<request>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      fast
    |      help
    |      silent
    |      verbose
    |
    |Where <request> is one of the following:
    |      bless  [ <filename> | last ]...
    |      delta  [ <filename> | last ]...
    |      export [ makefile | ruleset ]
    |      grade  [ <filename> | last ]...
    |      invoke [ <filename> | last ]...
    |      make   [ <filename> | last | grades | outputs ]...
    |      review [ <filename> | last ]...
    |      set    <name> <value>
    |      show   [ configuration [ names | variables ] | copyright | version ]
    |
    |Compare|Delta|Pre-Grade...
    |
    |A 'delta' request asks kamaji to compare the current output of each CLUT or
    |unit test exercise to its baseline. The main reason that the delta command
    |exists is that output file comparisons may be expensive, and thus they are a
    |good candidate to apply apply parallel processing to.
    |
    |A 'delta last' request will compare the current output of the last make target
    |processed by kamaji the last time it was invoked. The "last" target is the same
    |no matter where it appears in the list of targets passed to an 'delta' request.
    |
    |A 'delta' request without any specific targets is the same as an 'delta'
    |request for all known targets. Furthermore, those targets will be processed
    |based on when their base sources were last modified. In this way, when the user
    |modifies the source file for a specific CLUT or unit test, kamaji will make
    |processing that test a higher priority than all others.
    |
    |Copyright (c) 2019-2020 Brian G. Holmes.
    |kamaji version 1.00
25.5. Finalizations.
25.6. Workspace Impact...
25.6.1. The initial and final workspace contents are equivalent.

CLUT Source File: kamaji.01.usage.clut (25 cases)
CLUT Output Format Version: 5.5
CLUT Output Complete.
