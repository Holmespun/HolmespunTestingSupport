[](Kamaji_Automated_Test_Manager_quickstart_guide_exercise.bash...)
[](===============================================================)

# Kamaji Automated Test Manager Quick-Start Guide

This briefly illustrates how the Kamaji Automated Test Manager is used.
The following documentation may also be useful:

* [Kamaji Automated Test Manager](Documen/Kamaji_Automated_Test_Manager.md)
Detailed documentation for the Kamaji program.

* [Testing/Kamaji_Automated_Test_Manager_Quickstart_Guide_exercise.bash](Testing/Kamaji_Automated_Test_Manager_Quickstart_Guide_exercise.bash)
This document is the output file from a test script; it was generated by Kamaji itself.

1. Clone the repositories.

    ~~~~bash
    $ git clone https://github.com/Holmespun/HolmespunLibraryBashing.git
    $ git clone https://github.com/Holmespun/HolmespunTestingSupport.git
    ~~~~

1. Give yourself temporary access to the utilities in each of these repositories.
You do not want this addition to the PATH variable to be active after the repository is installed.

    ~~~~bash
    $ export PATH=${PWD}/HolmespunLibraryBashing/bin:${PATH}
    $ export PATH=${PWD}/HolmespunTestingSupport/bin:${PATH}
    ~~~~

1. [Optional] Follow the rest of the installation instructions provided in the
[Installation](Documen/Kamaji_Automated_Test_Manager.md#installation) section of the
[Kamaji Automated Test Manager](Documen/Kamaji_Automated_Test_Manager.md) documentation.

1. Create a project directory to play around in and a Testing subdirectory.

	~~~~bash
	$ cd
	$ mkdir KamajiQuickStart
	$ cd KamajiQuickStart
	$ mkdir Testing
	$
	~~~~

1. Start your development effort by creating a prototype.

    prototype.py:

	~~~~python
	#!/usr/bin/env python
	#
	#  prototype: Given a numeric date-and-time-stamp,
	#  display the date and time in YYYY-MM-DD HH:MM:SS format.
	#
	
	from datetime import datetime
	import sys
	
	input_form = sys.argv[1]
	
	internal_form = datetime.fromtimestamp( float(input_form) )
	
	output_form = internal_form.strftime("%c")
	
	print( output_form )
	
	#  (eof)
	~~~~

1. Create a test program that can be used to demonstrate the prototype.

    Testing/prototype_exercise.bash:

	~~~~bash
	#!/bin/bash
	#
	#  prototype exercise: Demonstration of prototype.py.
	#
	
	echo -n "Test $(basename ${0}); "
	echo -n "User ${USER}; "
	echo    "Date $(date '+%Y-%m-%d %H:%M:%S')."
	
	for Input in 1000000000 1575806789 2000000000
	do
	  #
	  echo -n "Given input ${Input}, prototype.py produces "
	  #
	  ../prototype.py ${Input}
	  #
	done
	
	#  (eof)
	~~~~

1. Take a quick look at the contents of our development directory.

	~~~~bash
	$ find . | sort
	.
	./Testing
	./Testing/prototype_exercise.bash
	./prototype.py
	~~~~

1. Ask Kamaji to grade your test.

	~~~~
	$ kamaji verbose grade prototype_exercise.bash
	kamaji make .kamaji.sed.composit.sed
	kamaji make prototype_exercise.output
	kamaji make prototype_exercise.output.masked
	kamaji make prototype_exercise.output.delta
	kamaji make prototype_exercise.output.grade
	FAIL: prototype_exercise.output.grade
	~~~~

	Tests that use demonstrative output will only pass if the output they produce matches that of the baseline
  result; your test failed because there is no baseline defined for it yet.

	Kamaji will answer a *grade* request with an evaluation for each test requested.
	The *verbose* modifier causes each Kamaji command to be displayed before it it executed.
  Kamaji invoked the test to create an output file, masked that file for comparison, determined that there
	was no baseline output file associated with the test, and - as such - failed the test.

1. Review the output file.

	~~~~
	$ kamaji review prototype_exercise.output
	FAIL: prototype_exercise.output.grade
	     1	Test prototype_exercise.bash; User %USER%; Date 2021-05-29 07:05:22.
	     2	Given input 1000000000, prototype.py produces Sat Sep  8 21:46:40 2001
	     3	Given input 1575806789, prototype.py produces Sun Dec  8 07:06:29 2019
	     4	Given input 2000000000, prototype.py produces Tue May 17 23:33:20 2033
	~~~~

	Kamaji evaluates the grade assigned to a test before it presents information for your review.
	Output that cannot be compared to a baseline is presented with line numbers to the left.
	As the output looks appropriate, the next step is to make it the baseline that future runs must match.

1.  Bless the output file.

	~~~~bash
	$ kamaji verbose verbose bless prototype_exercise.output
	# Building rules based on baseline files...
	find -L Testing -type f
	#    Testing/prototype_exercise.bash
	kamaji bless prototype_exercise.output
	echo "prototype_exercise.output.review" > Working/.kamaji.last_target.text
	cp prototype_exercise.output ../Testing/prototype_exercise.output
	rm prototype_exercise.output.reviewed
	~~~~

	The use of multiple *verbose* modifiers for the request above caused Kamaji to display the Linux commands
	it used to fulfill the request.
	In this mode, Kamaji reveals every critical action that it performs:
  It generates a ruleset for each test you have defined before fulfilling the request with a *cp* command.
  Along the way, it remembers the last target it was asked to act upon, and
  cleans up a marker that indicates that that target had been reviewed (and thus could be blessed).

1. Grade the test again.

	~~~~
	$ kamaji grade prototype_exercise.bash
	PASS: prototype_exercise.output.grade
	~~~~

1. Take a quick look at the contents of your development workspace.

	~~~~bash
	$ find . | sort
	.
	./Testing
	./Testing/prototype_exercise.bash
	./Testing/prototype_exercise.output
	./Working
	./Working/.kamaji.last_target.text
	./Working/.kamaji.sed.composit.sed
	./Working/.kamaji.sed.filelist.text
	./Working/prototype_exercise.bash
	./Working/prototype_exercise.golden
	./Working/prototype_exercise.golden.masked
	./Working/prototype_exercise.output
	./Working/prototype_exercise.output.delta
	./Working/prototype_exercise.output.masked
	./prototype.py
	~~~~

	Your Testing directory now contains a baseline output file.
	A *Working* folder has also been created in which Kamaji keeps links to your project code,
	as well as all of the work it derives from them.
	The Working folder is temporary; removing it is similar to issuing a *make clean* command.

	Kamaji also created an empty *.kamaji.sed* configuration file for you; it is a *sed* command script file.
  The .kamaji.sed script should be used to define output value masking.

1. Remove the Working folder.

	~~~~
	$ moveToGarbage Working
	mv Working $HOME/Garbage/YYYYMM/YYYYMMDD_HHMMSS.Account_Specific_Path.Working
	~~~~

1. Ask Kamaji to generate grades again.

	~~~~
	$ kamaji grade
	FAIL: prototype_exercise.output.grade
	~~~~

	Your test failed because the output generated by Kamaji now does not match the baseline.

1. Review the output file.

	~~~~
	$ kamaji review
	FAIL: prototype_exercise.output.grade
	1c1
	< Test prototype_exercise.bash; User %USER%; Date 2021-05-29 07:05:22.
	---
	> Test prototype_exercise.bash; User %USER%; Date 2021-05-29 07:05:25.
	~~~~

	Date and time values are one of the most common elements that are masked to make output files comparable.

1. Define a date- and time-stamp masks in your .kamaji.sed script.

    .kamaji.sed:

	~~~~sed
	#  .kamaji.sed
	
	#  From: Date 2019-12-10 09:34:43
	#  To:   Date YYYY-MM-DD HH:MM:SS
	
	s,[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\},YYYY-MM-DD,g
	s,[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\},HH:MM:SS,g
	
	#  (eof)
	~~~~
1. Ask Kamaji to generate grades again.

	~~~~
	$ kamaji grade
	PASS: prototype_exercise.output.grade

## Copyright 2019 Brian G. Holmes

This program is part of the Holmespun Testing Support repository.

The Holmespun Testing Support repository contains free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

The Holmespun Testing Support repository is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with this file. If not, see
<https://www.gnu.org/licenses/>.

See the [COPYING.text](COPYING.text) file for further licensing information.

**(eof)**

[](===============================================================)
