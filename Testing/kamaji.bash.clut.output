CLUT Output Begins...
CLUT Output Format Version: 5.5
CLUT Source File: kamaji.bash.clut (11 cases)

0. Global Information
0.1. Notations
    |No notations defined.
0.2. Requirement Statements
    |No requirements defined.
0.3. Requirement Coverage
    |No requirements defined.
0.4. Comparable Masks
    |No masks defined.

1. NoArguments.
    |General usage should be displayed.
1.1. Requirements.
    |None.
1.2. Initializations.
1.3. Initial Workspace is empty.
1.4. Target CLU Call.
1.4.1.  kamaji.bash
1.4.1.1. Exit Status 1!
1.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Modifier synonyms help (usage), noisy (verbose), and quiet (silent) are
    |supported. Command synonyms configure (set), invoke (execute), and run
    |(execute) are supported. Command abbreviations are accepted; ambiguity is
    |resolved using alphabetical order. No other actions are applied after a usage
    |request is fulfilled.
    |
    |Further help may be displayed by following the usage modified by the command or
    |command synonym of interest; for example, "kamaji.bash help invoke."
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile, execute, and then grade; these user requests are always fulfilled
    |whether they need to be or not. User requests may require support files to be
    |created. For example, a request to grade a set of CLUT definitions may result
    |in those defintions being compiled and executed first.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |made of compilable code or scripting languages. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled changes to the code
    |being tested.
    |
    |Passing grades are only granted when current output matched baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-define sed script.
    |
    |Three levels of diagnostic output are controlled by the silent and verbose
    |modifiers: The silent modifier causes this script to produce no diagnostic
    |output. A single verbose modifier is a request for light diagnostic output;
    |internal make commands. Multiple verbose modifiers will produce heavy
    |diagnostic output; additional Linux commands in blue.
    |
1.5. Finalizations.
1.6. Workspace Impact...
1.6.1. The initial and final workspace contents are equivalent.

2. Usage.
    |General usage should be displayed.
2.1. Requirements.
    |None.
2.2. Initializations.
2.3. Initial Workspace is empty.
2.4. Target CLU Call.
2.4.1.  kamaji.bash usage
2.4.1.1. Exit Status 1!
2.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Modifier synonyms help (usage), noisy (verbose), and quiet (silent) are
    |supported. Command synonyms configure (set), invoke (execute), and run
    |(execute) are supported. Command abbreviations are accepted; ambiguity is
    |resolved using alphabetical order. No other actions are applied after a usage
    |request is fulfilled.
    |
    |Further help may be displayed by following the usage modified by the command or
    |command synonym of interest; for example, "kamaji.bash help invoke."
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile, execute, and then grade; these user requests are always fulfilled
    |whether they need to be or not. User requests may require support files to be
    |created. For example, a request to grade a set of CLUT definitions may result
    |in those defintions being compiled and executed first.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |made of compilable code or scripting languages. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled changes to the code
    |being tested.
    |
    |Passing grades are only granted when current output matched baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-define sed script.
    |
    |Three levels of diagnostic output are controlled by the silent and verbose
    |modifiers: The silent modifier causes this script to produce no diagnostic
    |output. A single verbose modifier is a request for light diagnostic output;
    |internal make commands. Multiple verbose modifiers will produce heavy
    |diagnostic output; additional Linux commands in blue.
    |
2.5. Finalizations.
2.6. Workspace Impact...
2.6.1. The initial and final workspace contents are equivalent.

3. Help.
    |General usage should be displayed.
3.1. Requirements.
    |None.
3.2. Initializations.
3.3. Initial Workspace is empty.
3.4. Target CLU Call.
3.4.1.  kamaji.bash help
3.4.1.1. Exit Status 1!
3.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Modifier synonyms help (usage), noisy (verbose), and quiet (silent) are
    |supported. Command synonyms configure (set), invoke (execute), and run
    |(execute) are supported. Command abbreviations are accepted; ambiguity is
    |resolved using alphabetical order. No other actions are applied after a usage
    |request is fulfilled.
    |
    |Further help may be displayed by following the usage modified by the command or
    |command synonym of interest; for example, "kamaji.bash help invoke."
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile, execute, and then grade; these user requests are always fulfilled
    |whether they need to be or not. User requests may require support files to be
    |created. For example, a request to grade a set of CLUT definitions may result
    |in those defintions being compiled and executed first.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |made of compilable code or scripting languages. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled changes to the code
    |being tested.
    |
    |Passing grades are only granted when current output matched baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-define sed script.
    |
    |Three levels of diagnostic output are controlled by the silent and verbose
    |modifiers: The silent modifier causes this script to produce no diagnostic
    |output. A single verbose modifier is a request for light diagnostic output;
    |internal make commands. Multiple verbose modifiers will produce heavy
    |diagnostic output; additional Linux commands in blue.
    |
3.5. Finalizations.
3.6. Workspace Impact...
3.6.1. The initial and final workspace contents are equivalent.

4. Bobo.
    |General usage should be displayed.
4.1. Requirements.
    |None.
4.2. Initializations.
4.3. Initial Workspace is empty.
4.4. Target CLU Call.
4.4.1.  kamaji.bash bobo
4.4.1.1. Exit Status 1!
4.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Modifier synonyms help (usage), noisy (verbose), and quiet (silent) are
    |supported. Command synonyms configure (set), invoke (execute), and run
    |(execute) are supported. Command abbreviations are accepted; ambiguity is
    |resolved using alphabetical order. No other actions are applied after a usage
    |request is fulfilled.
    |
    |Further help may be displayed by following the usage modified by the command or
    |command synonym of interest; for example, "kamaji.bash help invoke."
    |
    |CLUT cases and unit test exercises are used and evaluated in similar ways:
    |compile, execute, and then grade; these user requests are always fulfilled
    |whether they need to be or not. User requests may require support files to be
    |created. For example, a request to grade a set of CLUT definitions may result
    |in those defintions being compiled and executed first.
    |
    |CLUT definitions are compiled into Bash scripts. Unit test exercises may be
    |made of compilable code or scripting languages. Compilable code must be
    |compiled and linked into executable files using a make framework. Scripts need
    |not be compiled.
    |
    |CLUT cases and unit test exercises produce demonstrative output that need not
    |be valid or invalid on its face. Users must evaluate the initial output from
    |these tests to determine whether it is valid; valid output must be blessed by
    |the user and copied to a safe location as baseline output. Future changes to
    |the tested code will result in output that differs from the baseline; these
    |differences should also be blessed to update the baseline. Users will benefit
    |from retesting frequently between minor and controlled changes to the code
    |being tested.
    |
    |Passing grades are only granted when current output matched baseline output,
    |but this matching is only attempted after the current and baseline output are
    |masked. Masking is performed using a user-define sed script.
    |
    |Three levels of diagnostic output are controlled by the silent and verbose
    |modifiers: The silent modifier causes this script to produce no diagnostic
    |output. A single verbose modifier is a request for light diagnostic output;
    |internal make commands. Multiple verbose modifiers will produce heavy
    |diagnostic output; additional Linux commands in blue.
    |
4.5. Finalizations.
4.6. Workspace Impact...
4.6.1. The initial and final workspace contents are equivalent.

5. HelpCompile.
5.1. Requirements.
    |None.
5.2. Initializations.
5.3. Initial Workspace is empty.
5.4. Target CLU Call.
5.4.1.  kamaji.bash help compile
5.4.1.1. Exit Status 1!
5.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Compile...
    |
    |The compile command is used to compile and link both CLUT definitions and unit
    |test exercises. CLUT definitions are stored in files that have the word "clut"
    |as their name extension. CLUT definitions are "compiled" by translating them to
    |executable Bash scripts; see the clutc.bash program for details. Any form of
    |command-line executable can be the subject of a suite of CLUT cases.
    |
    |Exercise programs (a.k.a. unit tests and class tests) are executable files with
    |"_exercise" in their names. If an exercise file is not already executable then
    |this script will attempt to use the system make command to compile it into an
    |executable program. Any form of command-line executable can be used as an
    |exercise.
    |
5.5. Finalizations.
5.6. Workspace Impact...
5.6.1. The initial and final workspace contents are equivalent.

6. HelpInvoke.
6.1. Requirements.
    |None.
6.2. Initializations.
6.3. Initial Workspace is empty.
6.4. Target CLU Call.
6.4.1.  kamaji.bash help invoke
6.4.1.1. Exit Status 1!
6.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Execute|Invoke|Run...
    |
    |Executable files are invoked to produce output files. Output file names are
    |based on the executable files that are used to create them. Script file name
    |extensions are removed from output file names. For example, output for the
    |program.bash script will be stored in the program.output file.
    |
6.5. Finalizations.
6.6. Workspace Impact...
6.6.1. The initial and final workspace contents are equivalent.

7. HelpGrade.
7.1. Requirements.
    |None.
7.2. Initializations.
7.3. Initial Workspace is empty.
7.4. Target CLU Call.
7.4.1.  kamaji.bash help grade
7.4.1.1. Exit Status 1!
7.4.1.2. STDOUT [text]...
    |USAGE: kamaji.bash [<modifier>]... [<command>] [<parameter>]...
    |
    |Where <modifier> is one of the following:
    |      verbose
    |      silent
    |      usage
    |
    |Where <modifier> <command> is one of the following:
    |      compile   [<specification>]...
    |      execute   [<specification>]...
    |      grade     [<specification>]...
    |      set	<name> <value>
    |
    |Grade...
    |
    |A passing grade is granted when a current output file matches the baseline
    |output file of the same name. Comparisons are made to output files only after
    |they are masked to remove non-deterministic values, like dates, times, and
    |account-specific directory names.
    |
    |The mask-sed-script configuration value can be used to specify the location of
    |the user-define sed script.
    |
7.5. Finalizations.
7.6. Workspace Impact...
7.6.1. The initial and final workspace contents are equivalent.

8. ClutFromClut_Compile.
8.1. Requirements.
    |None.
8.2. Initializations.
8.2.1. mkdir Testing
8.2.2. create_program_script PROGRAM.bash
8.2.3. create_program_clut Testing/PROGRAM.bash.clut
8.3. Initial Workspace contains 3 files...
    |PROGRAM.bash
    |Testing
    |Testing/PROGRAM.bash.clut
8.3.1. PROGRAM.bash...
    |#!/bin/bash
    |#
    |#  PROGRAM.bash created by create_program_script.
    |#
    |echo "I am the greetest! Now I am leaving Earth for no raisin!"
    |#
8.3.2. Testing contains one file.
8.3.2.1. PROGRAM.bash.clut...
    |#!/bin/bash
    |#
    |#  Testing/PROGRAM.bash.clut created by create_program_clut.
    |#
    |function testCollection() {
    |  #
    |  clut_case_name		NoArguments
    |  clut_case_comment	"This is the most trivial test case."
    |  clut_case_end
    |  #
    |}
    |#
    |clut_definition_set	testCollection
    |#
8.4. Target CLU Call.
8.4.1.  kamaji.bash verbose verbose compile Testing/PROGRAM.bash.clut
8.4.1.1. STDOUT [text]...
    |[38;5;15mkamaji.bash compile Testing/PROGRAM.bash.clut[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# GT ./PROGRAM.bash.clut.bash does not exist[0m
    |[38;5;12m(cd Testing; clutc PROGRAM.bash.clut ../PROGRAM.bash ../PROGRAM.bash.clut.bash)[0m
8.5. Finalizations.
8.6. Workspace Impact...
    |Only in 08.Omega: PROGRAM.bash.clut.bash
    |Only in 08.Omega: PROGRAM.bash.clutc.20190713_225452
8.6.1. PROGRAM.bash.clut.bash (created) is a symbolic link to PROGRAM.bash.clutc.20190713_225452/00.compiled.bash
8.6.2. PROGRAM.bash.clutc.20190713_225452 (created) contains 3 files.
8.6.2.1. 00.compiled.bash...
    |#!/bin/bash
    |#----------------------------------------------------------------------------------------
    |#
    |#  ../PROGRAM.bash.clutc.20190713_225452/00.compiled.bash...
    |#
    |#  Created by clutc on 2019-07-13 at 22:54:52.
    |#
    |#  CLUT cases were defined in PROGRAM.bash.clut; there were 1 of them.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |set -u
    |
    |source $(whereHolmespunLibraryBashing)/Library/echoDatStampedFSpec.bash
    |
    |declare -r __ScriptFName=$(basename ${0})
    |
    |declare -r __ScriptArgumentList="${*}"
    |
    |declare -r __WhereWeWereDSpec="${PWD}"
    |
    |declare    __ClutWorkingDSpec
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Set the PATH variable to make sure it can find the CLU we want to test.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |export PATH="/home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/08.Working:${PATH}"
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Define the clut_definition_set function as a no-op during run-time.
    |#
    |#  None of the other clut_case_* functions will be called when sourcing the user's CLUT
    |#  definitions because they must only be called within functions that are defined for use
    |#  by the clut_definition_set function.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clut_definition_set() { : ; }
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Load the CLUT framework run-time support functions.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |source $(whereHolmespunTestingSupport)/Bash/Library/clutr.bash
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalInitializations...
    |#
    |#  Execute each of the global initializations at run-time.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalInitializations() {
    |  #
    |  : No global initializations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalFinalizations...
    |#
    |#  Execute each of the global finalizations at run-time.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalFinalizations() {
    |  #
    |  : No global finalizations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeNotations...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeNotations() {
    |  #
    |  clutCaseRunTimeReport 1 Notations
    |  #
    |  clutCaseRunTimeParagraph No notations defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementStatements...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementStatements() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Statements
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementCoverage...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementCoverage() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Coverage
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeDescribeGlobalInformation...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeDescribeGlobalInformation() {
    |  #
    |  echo ""
    |  #
    |  clutCaseRunTimeReport 0 Global Information
    |  #
    |  clutFileRunTimeNotations
    |  #
    |  clutFileRunTimeRequirementStatements
    |  #
    |  clutFileRunTimeRequirementCoverage
    |  #
    |  clutCaseRunTimeReport 1 Comparable Masks
    |  #
    |  clutCaseRunTimeParagraph No masks defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMask...
    |#
    |#  Apply the global compare masks.  Two arguments may take either of these forms:
    |#
    |#	File <file-specification>
    |#	Text <message>
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMask() {
    |  #
    |  local -r Format=${1}
    |  local -r Target="${2}"
    |  #
    |  [ "${Format}" = Text ] && echo "${Target}"
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskDataInFile...
    |#
    |#  Apply the global compare masks to the contents of one file.
    |#
    |#  The man page for the 'test' command states that, "Except for -h and -L, all
    |#  FILE-related tests dereference symbolic links."  As such, we need to test for
    |#  symbolic link type before we do for directory type.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskDataInFile() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskFilesInDirectory...
    |#
    |#  Apply the global compare masks to the files in the given workspace.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskFilesInDirectory() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  Load the user's run-time support functions.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |source /home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/08.Working/Testing/PROGRAM.bash.clut
    |
    |#---------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCaseAll() {
    |  #
    |  local -r Instrumentation=${*}
    |  #
    |  #
    |  #  testCollection
    |  #
    |  clutCaseRunTimeForTestCase01 ${Instrumentation}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMain...
    |#
    |#  Run a single test case if the user has requested it; run all of the otherwise.
    |#
    |#  Instrumentation only applies to the CLU.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMain() {
    |  #
    |  local -r ArgumentList=${*}
    |  #
    |  local -r IntegerRegex="^[0-9]+$"
    |  #
    |  local    Instrumentation=
    |  local    TestCaseIndex=
    |  local    WorkinLName=
    |  #
    |  local    ArgumentItem
    |  local    WorkinDName
    |  #
    |  for ArgumentItem in ${ArgumentList}
    |  do
    |    #
    |    #  If we are still checking the lead arguments...
    |    #
    |    if [ ${#Instrumentation} -eq 0 ]
    |    then
    |       #
    |       #  If the lead argument...
    |       #     Is an integer then the user only wants to run one test case.
    |       #  Else if the lead argument...
    |       #     Begins with the option name '--working=' then it names the working directory.
    |       #  Else...
    |       #     It marks the beginning of the instrumentation command.
    |       #  Endif
    |       #
    |       if [[ "${ArgumentItem}" =~ ${IntegerRegex} ]]
    |       then
    |          #
    |          TestCaseIndex=${ArgumentItem}
    |          #
    |       elif [ "${ArgumentItem:0:10}" = "--working=" ]
    |       then
    |          #
    |          WorkinLName="${ArgumentItem:10}"
    |          #
    |       else
    |          #
    |          Instrumentation="${ArgumentItem}"
    |          #
    |       fi
    |       #
    |    else
    |       #
    |       Instrumentation+=" ${ArgumentItem}"
    |       #
    |    fi
    |    #
    |  done
    |  #
    |  #  Register dump format functions.
    |  #
    |  clutFileRunTimeDumpFormatRegistrationStandard
    |  #
    |  #  Create a run-time working directory, and remember its specification.
    |  #
    |  if [ ${#WorkinLName} -eq 0 ]
    |  then
    |     #
    |     WorkinLName="PROGRAM.bash.clutr.working"
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.).$$
    |     #
    |  else
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.)
    |     #
    |  fi
    |  #
    |  mkdir ${WorkinDName}
    |  #
    |  cd ${WorkinDName}
    |     #
    |     __ClutWorkingDSpec=${PWD}
    |     #
    |     if [ ${#TestCaseIndex} -gt 0 ] && [[ ${TestCaseIndex} =~ ^[0-9]+$ ]]
    |     then
    |        #
    |        local -r ClutCaseIndexFormal=$(printf %02d ${TestCaseIndex})
    |        #
    |        clutCaseRunTimeForTestCase${ClutCaseIndexFormal} ${Instrumentation}
    |        #
    |     else
    |        #
    |        clutFileRunTimeDescribeStart PROGRAM.bash.clut 3 1
    |        #
    |        clutFileRunTimeDescribeGlobalInformation
    |        #
    |        clutCaseRunTimeForTestCaseAll ${Instrumentation}
    |        #
    |        clutFileRunTimeDescribeEnded PROGRAM.bash.clut 3 1
    |        #
    |     fi
    |     #
    |  cd ..
    |  #
    |  [ -L ${WorkinLName} ] && rm ${WorkinLName}
    |  #
    |  [ -e ${WorkinLName} ] && mv ${WorkinLName} ${WorkinLName}.was
    |  #
    |  ln --symbolic ${WorkinDName} ${WorkinLName}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |clutFileRunTimeMain ${__ScriptArgumentList}
    |
    |exit 0
    |
    |#-----------------------------------------------------------------------------------------
8.6.2.2. 00.namelist.text...
    |NoArguments
8.6.2.3. 01.bash...
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}

9. ClutFromClutBash_Compile.
    |Although the CLUT has aready been compiled, and that output is up-to-date, the CLUT will be compiled again
    |because the user specifically requested it.
9.1. Requirements.
    |None.
9.2. Initializations.
9.2.1. mkdir Testing
9.2.2. create_program_script PROGRAM.bash
9.2.3. create_program_clut Testing/PROGRAM.bash.clut
9.2.4. kamaji.bash compile Testing/PROGRAM.bash.clut
9.3. Initial Workspace contains 8 files...
    |PROGRAM.bash
    |PROGRAM.bash.clut.bash
    |PROGRAM.bash.clutc.20190713_225452
    |PROGRAM.bash.clutc.20190713_225452/00.compiled.bash
    |PROGRAM.bash.clutc.20190713_225452/00.namelist.text
    |PROGRAM.bash.clutc.20190713_225452/01.bash
    |Testing
    |Testing/PROGRAM.bash.clut
9.3.1. PROGRAM.bash...
    |#!/bin/bash
    |#
    |#  PROGRAM.bash created by create_program_script.
    |#
    |echo "I am the greetest! Now I am leaving Earth for no raisin!"
    |#
9.3.2. PROGRAM.bash.clut.bash is a symbolic link to PROGRAM.bash.clutc.20190713_225452/00.compiled.bash
9.3.3. PROGRAM.bash.clutc.20190713_225452 contains 3 files.
9.3.3.1. 00.compiled.bash...
    |#!/bin/bash
    |#----------------------------------------------------------------------------------------
    |#
    |#  ../PROGRAM.bash.clutc.20190713_225452/00.compiled.bash...
    |#
    |#  Created by clutc on 2019-07-13 at 22:54:52.
    |#
    |#  CLUT cases were defined in PROGRAM.bash.clut; there were 1 of them.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |set -u
    |
    |source $(whereHolmespunLibraryBashing)/Library/echoDatStampedFSpec.bash
    |
    |declare -r __ScriptFName=$(basename ${0})
    |
    |declare -r __ScriptArgumentList="${*}"
    |
    |declare -r __WhereWeWereDSpec="${PWD}"
    |
    |declare    __ClutWorkingDSpec
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Set the PATH variable to make sure it can find the CLU we want to test.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |export PATH="/home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/09.Working:${PATH}"
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Define the clut_definition_set function as a no-op during run-time.
    |#
    |#  None of the other clut_case_* functions will be called when sourcing the user's CLUT
    |#  definitions because they must only be called within functions that are defined for use
    |#  by the clut_definition_set function.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clut_definition_set() { : ; }
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Load the CLUT framework run-time support functions.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |source $(whereHolmespunTestingSupport)/Bash/Library/clutr.bash
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalInitializations...
    |#
    |#  Execute each of the global initializations at run-time.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalInitializations() {
    |  #
    |  : No global initializations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalFinalizations...
    |#
    |#  Execute each of the global finalizations at run-time.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalFinalizations() {
    |  #
    |  : No global finalizations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeNotations...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeNotations() {
    |  #
    |  clutCaseRunTimeReport 1 Notations
    |  #
    |  clutCaseRunTimeParagraph No notations defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementStatements...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementStatements() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Statements
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementCoverage...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementCoverage() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Coverage
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeDescribeGlobalInformation...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeDescribeGlobalInformation() {
    |  #
    |  echo ""
    |  #
    |  clutCaseRunTimeReport 0 Global Information
    |  #
    |  clutFileRunTimeNotations
    |  #
    |  clutFileRunTimeRequirementStatements
    |  #
    |  clutFileRunTimeRequirementCoverage
    |  #
    |  clutCaseRunTimeReport 1 Comparable Masks
    |  #
    |  clutCaseRunTimeParagraph No masks defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMask...
    |#
    |#  Apply the global compare masks.  Two arguments may take either of these forms:
    |#
    |#	File <file-specification>
    |#	Text <message>
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMask() {
    |  #
    |  local -r Format=${1}
    |  local -r Target="${2}"
    |  #
    |  [ "${Format}" = Text ] && echo "${Target}"
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskDataInFile...
    |#
    |#  Apply the global compare masks to the contents of one file.
    |#
    |#  The man page for the 'test' command states that, "Except for -h and -L, all
    |#  FILE-related tests dereference symbolic links."  As such, we need to test for
    |#  symbolic link type before we do for directory type.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskDataInFile() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskFilesInDirectory...
    |#
    |#  Apply the global compare masks to the files in the given workspace.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskFilesInDirectory() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  Load the user's run-time support functions.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |source /home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/09.Working/Testing/PROGRAM.bash.clut
    |
    |#---------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCaseAll() {
    |  #
    |  local -r Instrumentation=${*}
    |  #
    |  #
    |  #  testCollection
    |  #
    |  clutCaseRunTimeForTestCase01 ${Instrumentation}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMain...
    |#
    |#  Run a single test case if the user has requested it; run all of the otherwise.
    |#
    |#  Instrumentation only applies to the CLU.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMain() {
    |  #
    |  local -r ArgumentList=${*}
    |  #
    |  local -r IntegerRegex="^[0-9]+$"
    |  #
    |  local    Instrumentation=
    |  local    TestCaseIndex=
    |  local    WorkinLName=
    |  #
    |  local    ArgumentItem
    |  local    WorkinDName
    |  #
    |  for ArgumentItem in ${ArgumentList}
    |  do
    |    #
    |    #  If we are still checking the lead arguments...
    |    #
    |    if [ ${#Instrumentation} -eq 0 ]
    |    then
    |       #
    |       #  If the lead argument...
    |       #     Is an integer then the user only wants to run one test case.
    |       #  Else if the lead argument...
    |       #     Begins with the option name '--working=' then it names the working directory.
    |       #  Else...
    |       #     It marks the beginning of the instrumentation command.
    |       #  Endif
    |       #
    |       if [[ "${ArgumentItem}" =~ ${IntegerRegex} ]]
    |       then
    |          #
    |          TestCaseIndex=${ArgumentItem}
    |          #
    |       elif [ "${ArgumentItem:0:10}" = "--working=" ]
    |       then
    |          #
    |          WorkinLName="${ArgumentItem:10}"
    |          #
    |       else
    |          #
    |          Instrumentation="${ArgumentItem}"
    |          #
    |       fi
    |       #
    |    else
    |       #
    |       Instrumentation+=" ${ArgumentItem}"
    |       #
    |    fi
    |    #
    |  done
    |  #
    |  #  Register dump format functions.
    |  #
    |  clutFileRunTimeDumpFormatRegistrationStandard
    |  #
    |  #  Create a run-time working directory, and remember its specification.
    |  #
    |  if [ ${#WorkinLName} -eq 0 ]
    |  then
    |     #
    |     WorkinLName="PROGRAM.bash.clutr.working"
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.).$$
    |     #
    |  else
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.)
    |     #
    |  fi
    |  #
    |  mkdir ${WorkinDName}
    |  #
    |  cd ${WorkinDName}
    |     #
    |     __ClutWorkingDSpec=${PWD}
    |     #
    |     if [ ${#TestCaseIndex} -gt 0 ] && [[ ${TestCaseIndex} =~ ^[0-9]+$ ]]
    |     then
    |        #
    |        local -r ClutCaseIndexFormal=$(printf %02d ${TestCaseIndex})
    |        #
    |        clutCaseRunTimeForTestCase${ClutCaseIndexFormal} ${Instrumentation}
    |        #
    |     else
    |        #
    |        clutFileRunTimeDescribeStart PROGRAM.bash.clut 3 1
    |        #
    |        clutFileRunTimeDescribeGlobalInformation
    |        #
    |        clutCaseRunTimeForTestCaseAll ${Instrumentation}
    |        #
    |        clutFileRunTimeDescribeEnded PROGRAM.bash.clut 3 1
    |        #
    |     fi
    |     #
    |  cd ..
    |  #
    |  [ -L ${WorkinLName} ] && rm ${WorkinLName}
    |  #
    |  [ -e ${WorkinLName} ] && mv ${WorkinLName} ${WorkinLName}.was
    |  #
    |  ln --symbolic ${WorkinDName} ${WorkinLName}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |clutFileRunTimeMain ${__ScriptArgumentList}
    |
    |exit 0
    |
    |#-----------------------------------------------------------------------------------------
9.3.3.2. 00.namelist.text...
    |NoArguments
9.3.3.3. 01.bash...
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
9.3.4. Testing contains one file.
9.3.4.1. PROGRAM.bash.clut...
    |#!/bin/bash
    |#
    |#  Testing/PROGRAM.bash.clut created by create_program_clut.
    |#
    |function testCollection() {
    |  #
    |  clut_case_name		NoArguments
    |  clut_case_comment	"This is the most trivial test case."
    |  clut_case_end
    |  #
    |}
    |#
    |clut_definition_set	testCollection
    |#
9.4. Target CLU Call.
9.4.1.  kamaji.bash verbose verbose compile Testing/PROGRAM.bash.clut
9.4.1.1. STDOUT [text]...
    |[38;5;15mkamaji.bash compile Testing/PROGRAM.bash.clut[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# LT Testing/PROGRAM.bash.clut is younger-than ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# LT ./PROGRAM.bash is younger-than ./PROGRAM.bash.clut.bash[0m
9.5. Finalizations.
9.6. Workspace Impact...
9.6.1. The initial and final workspace contents are equivalent.

10. ClutFromClut_Execute.
10.1. Requirements.
    |None.
10.2. Initializations.
10.2.1. mkdir Testing
10.2.2. create_program_script PROGRAM.bash
10.2.3. create_program_clut Testing/PROGRAM.bash.clut
10.3. Initial Workspace contains 3 files...
    |PROGRAM.bash
    |Testing
    |Testing/PROGRAM.bash.clut
10.3.1. PROGRAM.bash...
    |#!/bin/bash
    |#
    |#  PROGRAM.bash created by create_program_script.
    |#
    |echo "I am the greetest! Now I am leaving Earth for no raisin!"
    |#
10.3.2. Testing contains one file.
10.3.2.1. PROGRAM.bash.clut...
    |#!/bin/bash
    |#
    |#  Testing/PROGRAM.bash.clut created by create_program_clut.
    |#
    |function testCollection() {
    |  #
    |  clut_case_name		NoArguments
    |  clut_case_comment	"This is the most trivial test case."
    |  clut_case_end
    |  #
    |}
    |#
    |clut_definition_set	testCollection
    |#
10.4. Target CLU Call.
10.4.1.  kamaji.bash verbose verbose execute Testing/PROGRAM.bash.clut
10.4.1.1. STDOUT [text]...
    |[38;5;15mkamaji.bash execute Testing/PROGRAM.bash.clut[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# GT ./PROGRAM.bash.clut.bash does not exist[0m
    |[38;5;12m(cd Testing; clutc PROGRAM.bash.clut ../PROGRAM.bash ../PROGRAM.bash.clut.bash)[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.output[0m
    |[38;5;12m# GT ./PROGRAM.bash.clut.output does not exist[0m
    |[38;5;12m(cd .; PROGRAM.bash.clut.bash > PROGRAM.bash.clut.output.partial 2>&1)[0m
    |[38;5;12mmv ./PROGRAM.bash.clut.output.partial ./PROGRAM.bash.clut.output[0m
10.5. Finalizations.
10.6. Workspace Impact...
    |Only in 10.Omega: PROGRAM.bash.clut.bash
    |Only in 10.Omega: PROGRAM.bash.clut.output
    |Only in 10.Omega: PROGRAM.bash.clutc.20190713_225453
    |Only in 10.Omega: PROGRAM.bash.clutr.working
    |Only in 10.Omega: PROGRAM.bash.clutr.working.20190713_225453.27965
10.6.1. PROGRAM.bash.clut.bash (created) is a symbolic link to PROGRAM.bash.clutc.20190713_225453/00.compiled.bash
10.6.2. PROGRAM.bash.clut.output (created)...
    |CLUT Output Begins...
    |CLUT Output Format Version: 5.5
    |CLUT Source File: PROGRAM.bash.clut (1 cases)
    |
    |0. Global Information
    |0.1. Notations
    |    |No notations defined.
    |0.2. Requirement Statements
    |    |No requirements defined.
    |0.3. Requirement Coverage
    |    |No requirements defined.
    |0.4. Comparable Masks
    |    |No masks defined.
    |
    |1. NoArguments.
    |    |This is the most trivial test case.
    |1.1. Requirements.
    |    |None.
    |1.2. Initializations.
    |1.3. Initial Workspace is empty.
    |1.4. Target CLU Call.
    |1.4.1.  PROGRAM.bash
    |1.4.1.1. STDOUT [text]...
    |    |I am the greetest! Now I am leaving Earth for no raisin!
    |1.5. Finalizations.
    |1.6. Workspace Impact...
    |1.6.1. The initial and final workspace contents are equivalent.
    |
    |CLUT Source File: PROGRAM.bash.clut (1 cases)
    |CLUT Output Format Version: 5.5
    |CLUT Output Complete.
10.6.3. PROGRAM.bash.clutc.20190713_225453 (created) contains 3 files.
10.6.3.1. 00.compiled.bash...
    |#!/bin/bash
    |#----------------------------------------------------------------------------------------
    |#
    |#  ../PROGRAM.bash.clutc.20190713_225453/00.compiled.bash...
    |#
    |#  Created by clutc on 2019-07-13 at 22:54:53.
    |#
    |#  CLUT cases were defined in PROGRAM.bash.clut; there were 1 of them.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |set -u
    |
    |source $(whereHolmespunLibraryBashing)/Library/echoDatStampedFSpec.bash
    |
    |declare -r __ScriptFName=$(basename ${0})
    |
    |declare -r __ScriptArgumentList="${*}"
    |
    |declare -r __WhereWeWereDSpec="${PWD}"
    |
    |declare    __ClutWorkingDSpec
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Set the PATH variable to make sure it can find the CLU we want to test.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |export PATH="/home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/10.Working:${PATH}"
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Define the clut_definition_set function as a no-op during run-time.
    |#
    |#  None of the other clut_case_* functions will be called when sourcing the user's CLUT
    |#  definitions because they must only be called within functions that are defined for use
    |#  by the clut_definition_set function.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clut_definition_set() { : ; }
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Load the CLUT framework run-time support functions.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |source $(whereHolmespunTestingSupport)/Bash/Library/clutr.bash
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalInitializations...
    |#
    |#  Execute each of the global initializations at run-time.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalInitializations() {
    |  #
    |  : No global initializations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalFinalizations...
    |#
    |#  Execute each of the global finalizations at run-time.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalFinalizations() {
    |  #
    |  : No global finalizations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeNotations...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeNotations() {
    |  #
    |  clutCaseRunTimeReport 1 Notations
    |  #
    |  clutCaseRunTimeParagraph No notations defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementStatements...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementStatements() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Statements
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementCoverage...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementCoverage() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Coverage
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeDescribeGlobalInformation...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeDescribeGlobalInformation() {
    |  #
    |  echo ""
    |  #
    |  clutCaseRunTimeReport 0 Global Information
    |  #
    |  clutFileRunTimeNotations
    |  #
    |  clutFileRunTimeRequirementStatements
    |  #
    |  clutFileRunTimeRequirementCoverage
    |  #
    |  clutCaseRunTimeReport 1 Comparable Masks
    |  #
    |  clutCaseRunTimeParagraph No masks defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMask...
    |#
    |#  Apply the global compare masks.  Two arguments may take either of these forms:
    |#
    |#	File <file-specification>
    |#	Text <message>
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMask() {
    |  #
    |  local -r Format=${1}
    |  local -r Target="${2}"
    |  #
    |  [ "${Format}" = Text ] && echo "${Target}"
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskDataInFile...
    |#
    |#  Apply the global compare masks to the contents of one file.
    |#
    |#  The man page for the 'test' command states that, "Except for -h and -L, all
    |#  FILE-related tests dereference symbolic links."  As such, we need to test for
    |#  symbolic link type before we do for directory type.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskDataInFile() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskFilesInDirectory...
    |#
    |#  Apply the global compare masks to the files in the given workspace.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskFilesInDirectory() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  Load the user's run-time support functions.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |source /home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/10.Working/Testing/PROGRAM.bash.clut
    |
    |#---------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCaseAll() {
    |  #
    |  local -r Instrumentation=${*}
    |  #
    |  #
    |  #  testCollection
    |  #
    |  clutCaseRunTimeForTestCase01 ${Instrumentation}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMain...
    |#
    |#  Run a single test case if the user has requested it; run all of the otherwise.
    |#
    |#  Instrumentation only applies to the CLU.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMain() {
    |  #
    |  local -r ArgumentList=${*}
    |  #
    |  local -r IntegerRegex="^[0-9]+$"
    |  #
    |  local    Instrumentation=
    |  local    TestCaseIndex=
    |  local    WorkinLName=
    |  #
    |  local    ArgumentItem
    |  local    WorkinDName
    |  #
    |  for ArgumentItem in ${ArgumentList}
    |  do
    |    #
    |    #  If we are still checking the lead arguments...
    |    #
    |    if [ ${#Instrumentation} -eq 0 ]
    |    then
    |       #
    |       #  If the lead argument...
    |       #     Is an integer then the user only wants to run one test case.
    |       #  Else if the lead argument...
    |       #     Begins with the option name '--working=' then it names the working directory.
    |       #  Else...
    |       #     It marks the beginning of the instrumentation command.
    |       #  Endif
    |       #
    |       if [[ "${ArgumentItem}" =~ ${IntegerRegex} ]]
    |       then
    |          #
    |          TestCaseIndex=${ArgumentItem}
    |          #
    |       elif [ "${ArgumentItem:0:10}" = "--working=" ]
    |       then
    |          #
    |          WorkinLName="${ArgumentItem:10}"
    |          #
    |       else
    |          #
    |          Instrumentation="${ArgumentItem}"
    |          #
    |       fi
    |       #
    |    else
    |       #
    |       Instrumentation+=" ${ArgumentItem}"
    |       #
    |    fi
    |    #
    |  done
    |  #
    |  #  Register dump format functions.
    |  #
    |  clutFileRunTimeDumpFormatRegistrationStandard
    |  #
    |  #  Create a run-time working directory, and remember its specification.
    |  #
    |  if [ ${#WorkinLName} -eq 0 ]
    |  then
    |     #
    |     WorkinLName="PROGRAM.bash.clutr.working"
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.).$$
    |     #
    |  else
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.)
    |     #
    |  fi
    |  #
    |  mkdir ${WorkinDName}
    |  #
    |  cd ${WorkinDName}
    |     #
    |     __ClutWorkingDSpec=${PWD}
    |     #
    |     if [ ${#TestCaseIndex} -gt 0 ] && [[ ${TestCaseIndex} =~ ^[0-9]+$ ]]
    |     then
    |        #
    |        local -r ClutCaseIndexFormal=$(printf %02d ${TestCaseIndex})
    |        #
    |        clutCaseRunTimeForTestCase${ClutCaseIndexFormal} ${Instrumentation}
    |        #
    |     else
    |        #
    |        clutFileRunTimeDescribeStart PROGRAM.bash.clut 3 1
    |        #
    |        clutFileRunTimeDescribeGlobalInformation
    |        #
    |        clutCaseRunTimeForTestCaseAll ${Instrumentation}
    |        #
    |        clutFileRunTimeDescribeEnded PROGRAM.bash.clut 3 1
    |        #
    |     fi
    |     #
    |  cd ..
    |  #
    |  [ -L ${WorkinLName} ] && rm ${WorkinLName}
    |  #
    |  [ -e ${WorkinLName} ] && mv ${WorkinLName} ${WorkinLName}.was
    |  #
    |  ln --symbolic ${WorkinDName} ${WorkinLName}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |clutFileRunTimeMain ${__ScriptArgumentList}
    |
    |exit 0
    |
    |#-----------------------------------------------------------------------------------------
10.6.3.2. 00.namelist.text...
    |NoArguments
10.6.3.3. 01.bash...
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
10.6.4. PROGRAM.bash.clutr.working (created) is a symbolic link to PROGRAM.bash.clutr.working.20190713_225453.27965
10.6.5. PROGRAM.bash.clutr.working.20190713_225453.27965 (created) contains 2 files.
10.6.5.1. 01.Alpha is empty.
10.6.5.2. 01.Omega is empty.

11. ClutFromClutExecute_Execute.
    |Although the CLUT output has aready been generate, and it is up-to-date, it will be generated again because the
    |user specifically requested it.
11.1. Requirements.
    |None.
11.2. Initializations.
11.2.1. mkdir Testing
11.2.2. create_program_script PROGRAM.bash
11.2.3. create_program_clut Testing/PROGRAM.bash.clut
11.2.4. kamaji.bash invoke Testing/PROGRAM.bash.clut
11.3. Initial Workspace contains 13 files...
    |PROGRAM.bash
    |PROGRAM.bash.clut.bash
    |PROGRAM.bash.clut.output
    |PROGRAM.bash.clutc.20190713_225453
    |PROGRAM.bash.clutc.20190713_225453/00.compiled.bash
    |PROGRAM.bash.clutc.20190713_225453/00.namelist.text
    |PROGRAM.bash.clutc.20190713_225453/01.bash
    |PROGRAM.bash.clutr.working
    |PROGRAM.bash.clutr.working.20190713_225453.28362
    |PROGRAM.bash.clutr.working.20190713_225453.28362/01.Alpha
    |PROGRAM.bash.clutr.working.20190713_225453.28362/01.Omega
    |Testing
    |Testing/PROGRAM.bash.clut
11.3.1. PROGRAM.bash...
    |#!/bin/bash
    |#
    |#  PROGRAM.bash created by create_program_script.
    |#
    |echo "I am the greetest! Now I am leaving Earth for no raisin!"
    |#
11.3.2. PROGRAM.bash.clut.bash is a symbolic link to PROGRAM.bash.clutc.20190713_225453/00.compiled.bash
11.3.3. PROGRAM.bash.clut.output...
    |CLUT Output Begins...
    |CLUT Output Format Version: 5.5
    |CLUT Source File: PROGRAM.bash.clut (1 cases)
    |
    |0. Global Information
    |0.1. Notations
    |    |No notations defined.
    |0.2. Requirement Statements
    |    |No requirements defined.
    |0.3. Requirement Coverage
    |    |No requirements defined.
    |0.4. Comparable Masks
    |    |No masks defined.
    |
    |1. NoArguments.
    |    |This is the most trivial test case.
    |1.1. Requirements.
    |    |None.
    |1.2. Initializations.
    |1.3. Initial Workspace is empty.
    |1.4. Target CLU Call.
    |1.4.1.  PROGRAM.bash
    |1.4.1.1. STDOUT [text]...
    |    |I am the greetest! Now I am leaving Earth for no raisin!
    |1.5. Finalizations.
    |1.6. Workspace Impact...
    |1.6.1. The initial and final workspace contents are equivalent.
    |
    |CLUT Source File: PROGRAM.bash.clut (1 cases)
    |CLUT Output Format Version: 5.5
    |CLUT Output Complete.
11.3.4. PROGRAM.bash.clutc.20190713_225453 contains 3 files.
11.3.4.1. 00.compiled.bash...
    |#!/bin/bash
    |#----------------------------------------------------------------------------------------
    |#
    |#  ../PROGRAM.bash.clutc.20190713_225453/00.compiled.bash...
    |#
    |#  Created by clutc on 2019-07-13 at 22:54:53.
    |#
    |#  CLUT cases were defined in PROGRAM.bash.clut; there were 1 of them.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |set -u
    |
    |source $(whereHolmespunLibraryBashing)/Library/echoDatStampedFSpec.bash
    |
    |declare -r __ScriptFName=$(basename ${0})
    |
    |declare -r __ScriptArgumentList="${*}"
    |
    |declare -r __WhereWeWereDSpec="${PWD}"
    |
    |declare    __ClutWorkingDSpec
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Set the PATH variable to make sure it can find the CLU we want to test.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |export PATH="/home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/11.Working:${PATH}"
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Define the clut_definition_set function as a no-op during run-time.
    |#
    |#  None of the other clut_case_* functions will be called when sourcing the user's CLUT
    |#  definitions because they must only be called within functions that are defined for use
    |#  by the clut_definition_set function.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clut_definition_set() { : ; }
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  Load the CLUT framework run-time support functions.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |source $(whereHolmespunTestingSupport)/Bash/Library/clutr.bash
    |
    |#----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalInitializations...
    |#
    |#  Execute each of the global initializations at run-time.
    |#
    |#----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalInitializations() {
    |  #
    |  : No global initializations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeGlobalFinalizations...
    |#
    |#  Execute each of the global finalizations at run-time.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeGlobalFinalizations() {
    |  #
    |  : No global finalizations.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeNotations...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeNotations() {
    |  #
    |  clutCaseRunTimeReport 1 Notations
    |  #
    |  clutCaseRunTimeParagraph No notations defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementStatements...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementStatements() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Statements
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeRequirementCoverage...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeRequirementCoverage() {
    |  #
    |  clutCaseRunTimeReport 1 Requirement Coverage
    |  #
    |  clutCaseRunTimeParagraph No requirements defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeDescribeGlobalInformation...
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeDescribeGlobalInformation() {
    |  #
    |  echo ""
    |  #
    |  clutCaseRunTimeReport 0 Global Information
    |  #
    |  clutFileRunTimeNotations
    |  #
    |  clutFileRunTimeRequirementStatements
    |  #
    |  clutFileRunTimeRequirementCoverage
    |  #
    |  clutCaseRunTimeReport 1 Comparable Masks
    |  #
    |  clutCaseRunTimeParagraph No masks defined.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMask...
    |#
    |#  Apply the global compare masks.  Two arguments may take either of these forms:
    |#
    |#	File <file-specification>
    |#	Text <message>
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMask() {
    |  #
    |  local -r Format=${1}
    |  local -r Target="${2}"
    |  #
    |  [ "${Format}" = Text ] && echo "${Target}"
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskDataInFile...
    |#
    |#  Apply the global compare masks to the contents of one file.
    |#
    |#  The man page for the 'test' command states that, "Except for -h and -L, all
    |#  FILE-related tests dereference symbolic links."  As such, we need to test for
    |#  symbolic link type before we do for directory type.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskDataInFile() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMaskFilesInDirectory...
    |#
    |#  Apply the global compare masks to the files in the given workspace.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMaskFilesInDirectory() {
    |  #
    |  : No global comparison masks to apply.
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  Load the user's run-time support functions.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |source /home/bgh/Holmespun/HolmespunTestingSupport/Working/kamaji.bash.clutr.working.20190713_225451.26663/11.Working/Testing/PROGRAM.bash.clut
    |
    |#---------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |function clutCaseRunTimeForTestCaseAll() {
    |  #
    |  local -r Instrumentation=${*}
    |  #
    |  #
    |  #  testCollection
    |  #
    |  clutCaseRunTimeForTestCase01 ${Instrumentation}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |#
    |#  clutFileRunTimeMain...
    |#
    |#  Run a single test case if the user has requested it; run all of the otherwise.
    |#
    |#  Instrumentation only applies to the CLU.
    |#
    |#-----------------------------------------------------------------------------------------
    |
    |function clutFileRunTimeMain() {
    |  #
    |  local -r ArgumentList=${*}
    |  #
    |  local -r IntegerRegex="^[0-9]+$"
    |  #
    |  local    Instrumentation=
    |  local    TestCaseIndex=
    |  local    WorkinLName=
    |  #
    |  local    ArgumentItem
    |  local    WorkinDName
    |  #
    |  for ArgumentItem in ${ArgumentList}
    |  do
    |    #
    |    #  If we are still checking the lead arguments...
    |    #
    |    if [ ${#Instrumentation} -eq 0 ]
    |    then
    |       #
    |       #  If the lead argument...
    |       #     Is an integer then the user only wants to run one test case.
    |       #  Else if the lead argument...
    |       #     Begins with the option name '--working=' then it names the working directory.
    |       #  Else...
    |       #     It marks the beginning of the instrumentation command.
    |       #  Endif
    |       #
    |       if [[ "${ArgumentItem}" =~ ${IntegerRegex} ]]
    |       then
    |          #
    |          TestCaseIndex=${ArgumentItem}
    |          #
    |       elif [ "${ArgumentItem:0:10}" = "--working=" ]
    |       then
    |          #
    |          WorkinLName="${ArgumentItem:10}"
    |          #
    |       else
    |          #
    |          Instrumentation="${ArgumentItem}"
    |          #
    |       fi
    |       #
    |    else
    |       #
    |       Instrumentation+=" ${ArgumentItem}"
    |       #
    |    fi
    |    #
    |  done
    |  #
    |  #  Register dump format functions.
    |  #
    |  clutFileRunTimeDumpFormatRegistrationStandard
    |  #
    |  #  Create a run-time working directory, and remember its specification.
    |  #
    |  if [ ${#WorkinLName} -eq 0 ]
    |  then
    |     #
    |     WorkinLName="PROGRAM.bash.clutr.working"
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.).$$
    |     #
    |  else
    |     #
    |     WorkinDName=$(echoDatStampedFSpec ${WorkinLName}.)
    |     #
    |  fi
    |  #
    |  mkdir ${WorkinDName}
    |  #
    |  cd ${WorkinDName}
    |     #
    |     __ClutWorkingDSpec=${PWD}
    |     #
    |     if [ ${#TestCaseIndex} -gt 0 ] && [[ ${TestCaseIndex} =~ ^[0-9]+$ ]]
    |     then
    |        #
    |        local -r ClutCaseIndexFormal=$(printf %02d ${TestCaseIndex})
    |        #
    |        clutCaseRunTimeForTestCase${ClutCaseIndexFormal} ${Instrumentation}
    |        #
    |     else
    |        #
    |        clutFileRunTimeDescribeStart PROGRAM.bash.clut 3 1
    |        #
    |        clutFileRunTimeDescribeGlobalInformation
    |        #
    |        clutCaseRunTimeForTestCaseAll ${Instrumentation}
    |        #
    |        clutFileRunTimeDescribeEnded PROGRAM.bash.clut 3 1
    |        #
    |     fi
    |     #
    |  cd ..
    |  #
    |  [ -L ${WorkinLName} ] && rm ${WorkinLName}
    |  #
    |  [ -e ${WorkinLName} ] && mv ${WorkinLName} ${WorkinLName}.was
    |  #
    |  ln --symbolic ${WorkinDName} ${WorkinLName}
    |  #
    |}
    |
    |#-----------------------------------------------------------------------------------------
    |
    |clutFileRunTimeMain ${__ScriptArgumentList}
    |
    |exit 0
    |
    |#-----------------------------------------------------------------------------------------
11.3.4.2. 00.namelist.text...
    |NoArguments
11.3.4.3. 01.bash...
    |function clutCaseRunTimeForTestCase01() {
    |  #
    |  local -r CluInstrumentation="${*} "
    |  #
    |  clutCaseRunTimeDescribeStart 1 "NoArguments"
    |  #
    |  clutCaseRunTimeParagraph "This is the most trivial test case."
    |  #
    |  clutCaseRunTimeReport 1 Requirements.
    |  #
    |  clutCaseRunTimeParagraph None.
    |  #
    |  mkdir 01.Working
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Initializations.
    |     #
    |     clutFileRunTimeGlobalInitializations
    |     #
    |  cd ..
    |  #
    |  cp --archive 01.Working 01.Alpha
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Alpha
    |  #
    |  clutCaseRunTimeDump 1 01.Alpha 'Initial Workspace'
    |  #
    |  cd 01.Working
    |     #
    |     clutCaseRunTimeReport 1 Target CLU Call.
    |     #
    |     clutCaseRunTimeUtilityExecute "" "${CluInstrumentation}PROGRAM.bash"
    |     #
    |     clutCaseRunTimeReport 1 Finalizations.
    |     #
    |     clutFileRunTimeGlobalFinalizations
    |     #
    |  cd ..
    |  #
    |  mv 01.Working 01.Omega
    |  #
    |  clutFileRunTimeMaskFilesInDirectory 01.Omega
    |  #
    |  clutCaseRunTimeCompare 01.Alpha 01.Omega
    |  #
    |  clutCaseRunTimeDescribeEnd 
    |  #
    |}
11.3.5. PROGRAM.bash.clutr.working is a symbolic link to PROGRAM.bash.clutr.working.20190713_225453.28362
11.3.6. PROGRAM.bash.clutr.working.20190713_225453.28362 contains 2 files.
11.3.6.1. 01.Alpha is empty.
11.3.6.2. 01.Omega is empty.
11.3.7. Testing contains one file.
11.3.7.1. PROGRAM.bash.clut...
    |#!/bin/bash
    |#
    |#  Testing/PROGRAM.bash.clut created by create_program_clut.
    |#
    |function testCollection() {
    |  #
    |  clut_case_name		NoArguments
    |  clut_case_comment	"This is the most trivial test case."
    |  clut_case_end
    |  #
    |}
    |#
    |clut_definition_set	testCollection
    |#
11.4. Target CLU Call.
11.4.1.  kamaji.bash verbose verbose execute Testing/PROGRAM.bash.clut
11.4.1.1. STDOUT [text]...
    |[38;5;15mkamaji.bash execute Testing/PROGRAM.bash.clut[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# LT Testing/PROGRAM.bash.clut is younger-than ./PROGRAM.bash.clut.bash[0m
    |[38;5;12m# LT ./PROGRAM.bash is younger-than ./PROGRAM.bash.clut.bash[0m
    |[38;5;15mkamaji.bash make ./PROGRAM.bash.clut.output[0m
    |[38;5;12m# LT ./PROGRAM.bash.clut.bash is younger-than ./PROGRAM.bash.clut.output[0m
11.5. Finalizations.
11.6. Workspace Impact...
11.6.1. The initial and final workspace contents are equivalent.

CLUT Source File: kamaji.bash.clut (11 cases)
CLUT Output Format Version: 5.5
CLUT Output Complete.
